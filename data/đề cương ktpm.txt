ĐỀ CƯƠNG ÔN TẬP MÔN KIỂM THỬ
LỚP CT02
1.I/ Lý thuyết
1.Lợi ích chính của việc kiểm thử sớm trong chu kỳ phát triển phần mềm là gì? Vì sao nói lỗi càng phát hiện muộn thì chi phí sửa lỗi càng cao?
-Hoạt động kiểm thử nên bắt đầu càng sớm càng tốt trong chu trình phát triển mềm và cần được tập trung vào các mục tiêu xác định.
-Kiểm thử sớm, phát hiện lỗi sớm, lỗi được sửa sớm sẽ đảm bảo được dự án hoàn thành đúng tiến độ và chất lượng sản phẩm cũng được đảm bảo. Chi phí của dự án cũng sẽ không bị phát sinh.
-Lỗi phát hiện muộn, sửa muộn, nhất là dồn vào giai đoạn thời gian cuối dự án, sẽ dẫn đến sửa vội, test vội, code vội, chất lượng ko được đảm bảo, tiến độ không hoàn thành được dẫn đến phải overtime, tăng chi phí của dự án.
-Phù hợp theo mô hình Thác nước. 
-Giúp phát hiện sớm các lỗi nghiêm trọng trong chu kỳ kiểm thử. 
-Giúp Nhóm Phát triển ổn định mã nguồn sớm. 
-Giúp giảm thiểu chi phí do sửa lỗi. 
-Giúp Nhóm phát triển xác định các lỗi một cách chi tiết ngay từ đầu trong chu kỳ phát hành.
-Nhóm quản lý có thể đưa ra các quyết định kinh doanh phù hợp dựa trên khối lượng các lỗi nghiêm trọng chưa được giải quyết trong Dự án/phiên bản phát hành.
-Giúp phân phối tài nguyên dùng cho việc Phát triển và kiểm thử một cách hiệu quả.
Vì sao lỗi càng phát hiện muộn thì chi phí sửa lỗi càng cao?
-Kiểm thử và sửa lỗi có thể được thực hiện tại bất kỳ giai đoạn nào của vòng đời phát triển sản phẩm. Từ giai đoạn Phân tích đặc tả nghiệp vụ, Thiết kế, Coding chứ không chỉ riêng giai đoạn test hay tập trung cho tất cả giai đoạn test.
-Lỗi được phát hiện càng muộn thì chi phí cho việc sửa lỗi càng lớn, bởi vì có những lỗi sẽ phải thực hiện lại từ khâu Thiết kế, rồi coding lại và mới thực hiện test được. Nên lỗi được phát hiện càng sớm, càng ở những giai đoạn đầu dự án, thậm chí ngay từ giai đoạn làm Yêu cầu/ Nghiệp vụ giúp cho các giai đoạn sau thực hiện được chính xác, giảm được số lượng lỗi và sản phẩm hoàn thành đúng tiến độ theo kế hoạch.
-Bug phát sinh ở giai đoạn release là nghiêm trọng và tốn kém nhất. Không chỉ bị ảnh hưởng về mặt uy tín chất lượng sản phẩm, mà còn dẫn đến việc phải coding và testing lại, phát sinh chi phí về nhân lực dự án, chậm trễ tiến độ.
-Bug được phát hiện càng muộn thì chi phí sửa càng lớn. Đôi khi không chỉ tỷ lệ với thời gian mà có thể là tỷ lệ bình phương thời gian.
2.Trình bày về ca kiểm thử và kịch bản kiểm thử? Lấy ví dụ minh họa
Ca kiểm thử:
-Là một tình huống kiểm tra, được thiết kế để kiểm tra một đối tượng có thỏa mãn yêu cầu đặt ra hay không. 
-Một Test Case mô tả dữ liệu đầu vào (input), hành động (action) và kết quả mong đợi (expected respone), kết quả thực tế, để xác định một chức năng của ứng dụng phần mềm hoạt động đúng hay không. 
-Mô tả Test case chi tiết hay ngắn gọn phụ thuộc vào quy mô của dự án hay quy mô của công ty sản xuất phần mềm.VD….
Kịch bản kiểm thử:
-Test Scenario bao gồm tất cả các chức năng có thể được kiểm thử .
-Test Scenario còn được gọi là Test Condition hoặc Test Possibility. 
-Mục đích của Test scenario: Cung cấp cái nhìn tổng thể cho các tester, nhà phân tích, nhà phát triển, khách hàng vv.. Tạo đề xuất về tổ chức hoặc nguồn nhân lực, Các Tester sẽ dựa trên Test Scenario để xây dựng các Test Case/Test script.

3.Lỗi thường xuất hiện ở giai đoạn nào là chủ yếu trong chu kỳ phát triển phần mềm?
-Lỗi xuất hiện ở tất cả các giai đoạn của phát triển phần mềm, Ở giai đoạn sau khi code xong và bàn giao sang cho tester bắt đầu giai đoạn testing là nhiều nhất. Một bên test và 1 bên fix bug, đây là giai đoạn nhiều lỗi nhất trong chu kỳ phát triển phần mềm.
4.So sánh kiểm thử mức đơn vị và kiểm thử tích hợp? Lấy ví dụ minh họa
Kiểm thử đơn vị	Kiểm thử tích hợp
-Là hoạt động kiểm thử nhỏ nhất, được tiến hành trên các Unit.
-Người thực hiện: developers
-Ưu điểm: Phát hiện và sửa lỗi sớm (giai đoạn lập trình)  Tài liệu kiểm thử có thể tái sử dụng lại  Độc lập với các thành phần khác của hệ thống.
-Nhược điểm: Không thể phát hiện mọi lỗi của chương trình, Khi thay đổi interface của module → phải sửa lại nhiều testcase
-Dữ liệu kiểm thử: Đặc tả các module
-Kỹ thuật sử dụng: kỹ thuật bao phủ code (code coverage) – thống kê dựa vào số lượng code được kiểm tra. 
- Bao phủ dòng lệnh
- Bao phủ nhánh 
- Bao phủ điều kiện 	-Là loại kiểm thử trong đó các module của phần mềm được tích hợp logic, được kiểm thử theo nhóm và thực hiện sau khi kiểm thử đơn vị.
-Mục tiêu:Phát hiện lỗi giao tiếp xảy ra giữa các Unit, Tích hợp các Unit đơn lẻ thành các hệ thống nhỏ (subsystem) và cuối cùng là hệ thống hoàn chỉnh để chuẩn bị cho kiểm thử mức System
-Dữ liệu kiểm thử: Đặc tả thiết kế.
Tập trung vào các giao diện và luồng xử lý thông tin giữa các module
-Cách tiếp cận: 
    Big bang: các thành phần được tích hợp cùng lúc, sau đó tiến hành kiểm thử
    Tiếp cận tăng dần: ghép hai hoặc nhiều module có liên quan đến logic, quá trình tiếp tục cho đến khi tất cả các module được them vào và hoàn thành quá trình kiểm thử:Bottom Up, Top Down.


Ví dụ về Test Case trong kiểm thử tích hợp

5.Phân biệt kiểm thử hộp đen, kiểm thử hộp trăng và kiểm thử hộp xám.
Kiểm thử hộp đen	Kiểm thử hộp trắng	Kiểm thử hộp xám
-Tập trung vào các yêu cầu chức năng của phầm mềm 
-KTV xem phần mềm như là một hộp đen:  Không quan tâm đến cấu trúc và hành vi bên trong phần mềm. Chỉ quan tâm đến các “hoạt động bề ngoài” của phần mềm.
-Mức áp dụng: kiểm tra hệ thống, kiểm trachấpnhận
-KTCN không cần biết về lập trình,cố gắng tìm ra các LỖI sau: 
-Chức năng THIẾU hoặc KHÔNG ĐÚNG
-Lỗi giao diện
-Lỗi cấu trúc dữ liệu
-Lỗi truy cập CSDL bên ngoài. 
-Lỗi thi hành 
-Lỗi khởi tạo/kết thúc.
-Kiểm tra hộp đen được bắt đầu dựa trên tài liệu yêu cầu kỹ thuật	-Dựa trên việc phân tích mã chương trình hoặc của một mô hình của mã chương trình để xây dựng các phép thử theo các tiêu chuẩn bao phủ. Kiểm thử cấu trúc bên trong của phần mềm, với mục đích kiểm tra tất cả các câu lệnh và điều kiện tồn tại trong phần mềm đó.
-Mức áp dụng:
- Kiểm thử đơn vị: kiểm tra đường dẫn trong một đơn vị 
Kiểm thử tích hợp: kiểm tra đường dẫn giữa các đơn vị 
-Kiểm thử hệ thống: Kiểm tra đường dẫn giữa các hệ thống con.
-KTCN cần có kiến thức về lập trình
-Kiểm tra hộp trắng được bắt đầu dựa trên các tài liệu thiết kế chi tiết 
	-là sự kết hợp giữa black box test và white box test 
-Trong Kiểm thử Hộp xám, cấu trúc bên trong sản phẩm chỉ được biết một phần.
